// Generated by Chat-GPT o3, 2025-08-07

#ifndef BLOOM_FILTER_HPP
#define BLOOM_FILTER_HPP

#include <vector>
#include <functional>
#include <cmath>
#include <cstdint>

class BloomFilter {
public:
    /// @brief Construct a Bloom filter.
    /// @param expectedElements Expected number of elements (n).
    /// @param falsePositiveRate Acceptable false positive probability (p).
    BloomFilter(std::size_t expectedElements, double falsePositiveRate)
    {
        computeParameters(expectedElements, falsePositiveRate);
        bits_.assign(bitCount_, false);
    }

    /// @brief Insert a key into the filter.
    void add(std::uint64_t key)
    {
        for (const auto &h : hashFuncs_) {
            bits_[h(key) % bitCount_] = true;
        }
    }

    /// @brief Query membership. Returns true if the key may be present.
    bool possiblyContains(std::uint64_t key) const
    {
        for (const auto &h : hashFuncs_) {
            if (!bits_[h(key) % bitCount_]) {
                return false;
            }
        }
        return true;
    }

    std::size_t bitCount() const { return bitCount_; }
    std::size_t hashCount() const { return hashFuncs_.size(); }

private:
    std::size_t bitCount_{};
    std::vector<bool> bits_{};
    std::vector<std::function<std::size_t(std::uint64_t)>> hashFuncs_{};

    /// @brief Generate a hash value with a seed to simulate k independent hashes.
    static std::size_t hashWithSeed(std::uint64_t key, std::uint32_t seed)
    {
        std::hash<std::uint64_t> hasher;
        std::size_t h = hasher(key);
        return h ^ (static_cast<std::size_t>(seed) + 0x9e3779b97f4a7c15ULL + (h << 6) + (h >> 2));
    }

    /// @brief Compute optimal bit array size (m) and number of hash functions (k).
    void computeParameters(std::size_t n, double p)
    {
        static constexpr double ln2 = 0.693147180559945309417;
        bitCount_ = static_cast<std::size_t>(std::ceil(-(static_cast<double>(n) * std::log(p)) / (ln2 * ln2)));
        std::size_t k = static_cast<std::size_t>(std::round((bitCount_ / static_cast<double>(n)) * ln2));

        hashFuncs_.reserve(k);
        for (std::size_t i = 0; i < k; ++i) {
            hashFuncs_.emplace_back([i](std::uint64_t v) {
                return hashWithSeed(v, static_cast<std::uint32_t>(i));
            });
        }
    }
};

#endif // BLOOM_FILTER_HPP


/*
#include <iostream>
#include "BloomFilter.hpp"

int main() {
    BloomFilter bf(10000, 0.5);      // n=10000，p=1% 
    bf.add(1);
    std::cout << bf.possiblyContains(1) << std::endl;  // 1
    std::cout << bf.possiblyContains(0) << std::endl; // 0 または 1
    return 0;
}
*/
